  // val program: ZIO[Client, Throwable, List[String]] = for {
  //   data <- fetchData.either // Use .either to convert to Either
  //   xml <- data match {
  //     case Right(d) => stringToXml(d).either
  //     case Left(e)  => ZIO.succeed(Left(e)) // Pass the error on
  //   }
  //   items <- xml match {
  //     case Right(x) => extractItems(x).either
  //     case Left(e)  => ZIO.succeed(Left(e))
  //   }
  // } yield (
  //   items match {
  //     case Right(i) => i
  //     case Left(e)  => List(e.toString())
  //   }
  // ) // Extract the value or provide an empty list

  // override val run = program
  //   .provide(Client.default)
  //   .tapError(e => Console.printLineError(s"An error occurred: $e"))
  //   .flatMap(items => Console.printLine(items.mkString("\n")))

  // import zio._
// import zio.http._
// import zio.stream._

// object MyApp extends ZIOAppDefault {
//   def run = copyFileContent

//   val copyFileContent: ZIO[Any, Throwable, Unit] =
//     import FileOperations._
//     for {
//       lines: List[String] <- readLines("source.txt")
//       filteredLines: List[String] <- filterLinesWithKeyword(lines, "ZIO")
//       _ <- writeFile("sync.txt", filteredLines)
//       _ <- Console.printLine(filteredLines.mkString("\n"))
//       _ <- Console.printLine("Data written to file successfully.")
//     } yield ()
// }


  // val program = for {
  //   startTime <- Clock.nanoTime
  //   dataA <- fetchData(feedUrls.head)
  //   xml <- stringToXml(dataA)
  //   itemsA <- extractItems(xml)

  //   dataB <- fetchData(feedUrls.last)
  //   xml <- stringToXml(dataB)
  //   itemsB <- extractItems(xml)

  //   items = itemsA ++ itemsB
  //   filteredItems <- filterLinesWithKeyword(items, "is")
  //   endTime <- Clock.nanoTime
  //   duration = (endTime - startTime).nanos
  //   _ <- Console.printLine(s"Execution time: $duration")
  //   // _ <- writeFile("sync.txt", filteredItems)
  //   // _ <- Console.printLine(filteredItems.mkString("\n"))
  // } yield ()

  // val program: ZIO[Client, Throwable, Unit] = for {
  //   startTime <- Clock.nanoTime
  //   fiberA <- (for {
  //     data <- fetchData(feedUrls.head)
  //     xml <- stringToXml(data)
  //     itemsA <- extractItems(xml)
  //   } yield itemsA).fork
  //   fiberB <- (for {
  //     data <- fetchData(feedUrls.last)
  //     xml <- stringToXml(data)
  //     itemsB <- extractItems(xml)
  //   } yield itemsB).fork

  //   itemsA <- fiberA.join
  //   itemsB <- fiberB.join

  //   items = itemsA ++ itemsB
  //   filteredItems <- filterLinesWithKeyword(items, "is")
  //   // _ <- writeFile("sync.txt", filteredItems)
  //   endTime <- Clock.nanoTime
  //   duration = (endTime - startTime).nanos
  //   _ <- Console.printLine(s"Execution time: $duration")
  //   // _ <- Console.printLine(filteredItems.mkString("\n"))
  // } yield ()

  // val program: ZIO[Client, Throwable, Unit] = for {
  //   startTime <- Clock.nanoTime
  //   // items <- ZIO
  //   //   .foreachPar(feedUrls)(feedUrl => // Use ZIO.foreachPar
  //   //     for {
  //   //       data <- fetchData(feedUrl)
  //   //       xml <- stringToXml(data)
  //   //       items <- extractItems(xml)
  //   //     } yield items
  //   //   )
  //   //   .map(_.flatten) // Flatten the list of lists
  //   items <- fetchAllItems(feedUrls)

  //   filteredItems <- filterLinesWithKeyword(items, "is")
  //   // _ <- writeFile("sync.txt", filteredItems)
  //   endTime <- Clock.nanoTime
  //   duration = (endTime - startTime).nanos
  //   _ <- Console.printLine(s"Execution time: $duration")
  //   _ <- Console.printLine(filteredItems.mkString("\n"))
  // } yield ()